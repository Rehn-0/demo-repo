'git clone <SSH key>'
'it'll clone the online repo. to your local machine.'
'in the repo. directory, command: git status'
'to start tracking changes in a file made in your local machine, command: git add <filename>' 
'otherwise, git status will show, "untracked files" '
'to start tracking every current file in the directory, command: git add .'
 'to save changes, command: git commit -m "Added index.html" -m "this is description box'
 '-m means message, like the two boxes in github'


'to initialize a local directory as a git repository, command: git init'
'it means it'll create a .git folder in the current directory"
'to create a repo. and both initialize it as a git repo. command: git init directory_name'
'to push it online, first create an empty repo on github and then copy the ssh'
'then, command: git remote add origin sshkey'
'to see if it worked, git remote -v'
'then command: git push origin master' because it has no upstream set for git push (i.e. git push -u origin master)

For branching: 
command: git checkout branchname // 'git checkout -b branchname' if it's a new branch
To check current branch: 
command: git branching

when you make any changes in another branch, the other branches(main itc) stays intact. 
to merge your code to main itc branch: 
cd to main
command: git merge feature
or u can check the differences beforehand by 
command: git diff feature 

but the convenient way to merge branches is, you push the changes on its respective branch
the make a pull request to merge with the main branch. 

when you make a pull request with another branch (main in this case), 
you can simply change the code, commit and push it to github
// that'll do the merging for you. 
command: git add test.txt   git commmit -m "description"   git push origin feature
make a pr online, approve it. 
// the feature branch will be merged with the main branch
then to make them visible in your local machine, you have to pull the main branch. 
command: git checkout main
command: git pull 

after merging, we can delete the feature branch
command: git branch -d feature




