'git clone <SSH key>'
'it'll clone the online repo. to your local machine.'
'in the repo. directory, command: git status'
'to start tracking changes in a file made in your local machine, command: git add <filename>' 
'otherwise, git status will show, "untracked files" '
'to start tracking every current file in the directory, command: git add .'
 'to save changes, command: git commit -m "Added index.html" -m "this is description box'
 '-m means message, like the two boxes in github'


'to initialize a local directory as a git repository, command: git init'
'it means it'll create a .git folder in the current directory"
'to create a repo. and both initialize it as a git repo. command: git init directory_name'
'to push it online, first create an empty repo on github and then copy the ssh'
'then, command: git remote add origin sshkey'
'to see if it worked, git remote -v'
'then command: git push origin master' because it has no upstream set for git push (i.e. git push -u origin master)

For branching: 
command: git checkout branchname // switch between branches
command: git checkout -b branchname // create and switch to a new branch
command: git branch branchname // create a new branch
command: git branch // check current branch

when you make any changes in another branch, the other branches(main itc) stays intact. 
to merge your code to main itc branch: 
cd to main
command: git merge feature
or u can check the differences beforehand by 
command: git diff feature 

but the convenient way to merge branches is, you push the changes on its respective branch
then make a pull request to merge with the main branch. 
command: git add test.txt   git commmit -m "description"   git push origin feature
make a pr online, approve it. 
// the feature branch will be merged with the main branch
then to make them visible in your local machine, you have to pull the main branch. 
command: git checkout main
command: git pull 

after merging, we can delete the feature branch
command: git branch -d feature

#shortcut for add and commit: (only for files that's been commited once)
command: git commit -am "added shortcut -a" 
// -a for add, -m for message

some quicktest line
now I can't switch to the quick branch. (I haven't commited these changes)
error: Your local changes to the following files would be overwritten by checkout:
test.txt
now, we'll commit the changes of main branch, go to the quick branch, see differences, try to merge to quick.
command: git commit -am "description"      git checkout quick      git diff main    git merge main

error: Merging is not possible because you have unmerged files.
hint: Fix them up in the work tree, and then use 'git add/rm <file>'
hint: as appropriate to mark resolution and make a commit.
fatal: Exiting because of an unresolved conflict.

resolve the conflicts, and then merge.
command: git merge main

So the thing is: 
when you work with multiple people on the same file, the main branch gets updated time to time on github. 
You can't just push your branch online and make a pull request to merge with the main. It would show conflicts. 
You first pull the latest main branch on your feature branch, resolve any conflicts
and then do your part of the changes, push it online, make a pull request to merge with the main 
Again, some conflicts! Haha...Etai bastob! 


